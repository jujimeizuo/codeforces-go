// Code generated by copypasta/template/atcoder/generator_test.go
package main

import (
	"fmt"
	"github.com/EndlessCheng/codeforces-go/main/testutil"
	"io"
	"math/rand"
	"strings"
	"testing"
)

// 题目：https://atcoder.jp/contests/abc300/tasks/abc300_f
// 提交：https://atcoder.jp/contests/abc300/submit?taskScreenName=abc300_f
// 对拍：https://atcoder.jp/contests/abc300/submissions?f.LanguageName=Go&f.Status=AC&f.Task=abc300_f&orderBy=source_length
func Test_run(t *testing.T) {
	t.Log("Current test is [f]")
	testCases := [][2]string{
		{
			`10 1 2
ooxxooooox`,
			`9`,
		},
		{
			`5 3 4
oxxox`,
			`8`,
		},
		{
			`30 1000000000 9982443530
oxoxooxoxoxooxoxooxxxoxxxooxox`,
			`19964887064`,
		},
		{
			`3 1 1
xxx`,
			`1`,
		},
		{
			`2 3 2
xo`,
			`5`,
		},
		{
			`1 3 2
x`,
			`2`,
		},
	}
	testutil.AssertEqualStringCase(t, testCases, 0, run)
}

func TestCompare(_t *testing.T) {
	//return
	testutil.DebugTLE = 0

	inputGenerator := func() string {
		//return ``
		rg := testutil.NewRandGenerator()
		n := rg.Int(1, 4)
		m := rg.Int(1, 4)
		x := rg.IntOnly(1, n)
		rg.Int(1, m*x)
		rg.NewLine()
		s := []byte(strings.Repeat("o", n))
		for _, i := range rand.Perm(n)[:x] {
			s[i] = 'x'
		}
		rg.Bytes(string(s))
		return rg.String()
	}

	runBF := func(in io.Reader, out io.Writer) {
		var n, m, k, ans int
		var s string
		fmt.Fscan(in, &n, &m, &k, &s)

		cnt := make([]int, n+1)
		for i := 0; i < n; i++ {
			cnt[i+1] = cnt[i]
			if s[i] == 'x' {
				cnt[i+1]++
			}
		}

		for i := 1; i <= n; i++ {
			ll := f(i-1, n, cnt)
			l, r := i, n*m
			for l <= r {
				te := (l + r) / 2
				if f(te, n, cnt)-ll <= k {
					l = te + 1
				} else {
					r = te - 1
				}
			}
			if ans < r-i+1 {
				ans = r - i + 1
			}
		}

		fmt.Fprintln(out, ans)
	}

	testutil.AssertEqualRunResultsInf(_t, inputGenerator, runBF, run)
}
func f(x, n int, cnt []int) int {
	res := (x / n) * cnt[n]
	rem := x % n
	res += cnt[rem]
	return res
}