// Code generated by copypasta/template/leetcode/generator_test.go
package main

import (
	"github.com/EndlessCheng/codeforces-go/leetcode/testutil"
	testutil2 "github.com/EndlessCheng/codeforces-go/main/testutil"
	"testing"
)

func Test_d(t *testing.T) {
	targetCaseNum :=  -1
	if err := testutil.RunLeetCodeFuncWithFile(t, minReverseOperations, "d.txt", targetCaseNum); err != nil {
		t.Fatal(err)
	}
}
// https://leetcode.cn/contest/weekly-contest-339/problems/minimum-reverse-operations/
// https://leetcode.cn/problems/minimum-reverse-operations/

func TestCompareInf(_t *testing.T) {
	testutil.DebugTLE = 0

	inputGenerator := func() (n int, p int, banned []int, k int) {
		//return 7,5, []int{}, 5
		rg := testutil2.NewRandGenerator()
		n = rg.Int(1, 7)
		p = rg.Int(0, n-1)
		set := []int{}
		for i := 0; i < n; i++ {
			if i != p {
				set = append(set, i)
			}
		}
		banned = rg.IntSliceOrdered(rg.IntOnly(0, n-1), 0, n-1, true, true)

		k = rg.Int(1,n)
		return
	}

	runAC := func(n int, p int, banned []int, k int) (ans []int) {

		has := map[int]bool{}
		for _, v := range banned {
			has[v] = true
		}
		q := []int{p}
		ans = make([]int, n)
		for _i := range ans {
			ans[_i] = -1
		}
		vis := make([]bool, n)
		vis[p] = true
		for level := 0; len(q) >0; level++ {
			tmp := q
			q = nil
			for _, v := range tmp {
				ans[v] = level
				// 所有包含 v 的子数组
				for r := k-1; r < n; r++ {
					l := r-k+1
					if l<=v && v <= r {
						w := l+r-v
						if !has[w] && !vis[w] && ans[w] < 0 {
vis[w] = true
							q = append(q, w)
						}
					}
				}
			}
		}

		return
	}

	// test examples first
	//if err := testutil.RunLeetCodeFuncWithFile(_t, runAC, "d.txt", 0); err != nil {
	//	_t.Fatal(err)
	//}
	//return

	testutil.CompareInf(_t, inputGenerator, runAC, minReverseOperations)
}
