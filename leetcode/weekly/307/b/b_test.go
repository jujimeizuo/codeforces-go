// Code generated by copypasta/template/leetcode/generator_test.go
package main

import (
	"github.com/EndlessCheng/codeforces-go/leetcode/testutil"
	testutil2 "github.com/EndlessCheng/codeforces-go/main/testutil"
	"strconv"
	"testing"
)

func Test_b(t *testing.T) {
	targetCaseNum :=  -1
	if err := testutil.RunLeetCodeFuncWithFile(t, largestPalindromic, "b.txt", targetCaseNum); err != nil {
		t.Fatal(err)
	}
}
// https://leetcode.cn/contest/weekly-contest-307/problems/largest-palindromic-number/
func TestCompareInf(t *testing.T) {
	testutil.DebugTLE = 0

	inputGenerator := func() (s string) {
		rg := testutil2.NewRandGenerator()
		s = rg.Str(1,5,'0','9')
		return
	}

	permutations := func(n, r int, do func(ids []int) (Break bool)) {
		ids := make([]int, n)
		for i := range ids {
			ids[i] = i
		}
		if do(ids[:r]) {
			return
		}
		cycles := make([]int, r)
		for i := range cycles {
			cycles[i] = n - i
		}
		for {
			i := r - 1
			for ; i >= 0; i-- {
				cycles[i]--
				if cycles[i] == 0 {
					tmp := ids[i]
					copy(ids[i:], ids[i+1:])
					ids[n-1] = tmp
					cycles[i] = n - i
				} else {
					j := cycles[i]
					ids[i], ids[n-j] = ids[n-j], ids[i]
					if do(ids[:r]) {
						return
					}
					break
				}
			}
			if i == -1 {
				return
			}
		}
	}

	runAC := func(s string) (ans string) {
		// 若要修改 a，必须先 copy 一份，在 copied 上修改
		num := 0
		for r := 1; r <= len(s); r++ {
			permutations(len(s), r, func(ids []int) (Break bool) {
				t := []byte{}
				for _, id := range ids {
					t = append(t, s[id])
				}
				if len(t) > 1 && t[0] == '0' {
					return
				}
				for i, n := 0, len(t); i < n/2; i++ {
					v, w := t[i], t[n-1-i]
					if v  != w {
						return
					}
				}
				tt := string(t)
				v, _ := strconv.Atoi(tt)
				if v > num {
					num = v
				}
				return
			})
		}

		ans = strconv.Itoa(num)
		return
	}

	// test examples first
	//if err := testutil.RunLeetCodeFuncWithFile(t, runAC, "b.txt", 0); err != nil {
	//	t.Fatal(err)
	//}
	//return

	testutil.CompareInf(t, inputGenerator, runAC, largestPalindromic)
}