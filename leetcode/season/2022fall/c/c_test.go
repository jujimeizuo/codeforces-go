// Code generated by copypasta/template/leetcode/generator_test.go
package main

import (
	"github.com/EndlessCheng/codeforces-go/leetcode/testutil"
	testutil2 "github.com/EndlessCheng/codeforces-go/main/testutil"
	"testing"
)

func Test_c(t *testing.T) {
	targetCaseNum := 0
	if err := testutil.RunLeetCodeFuncWithFile(t, ballGame, "c.txt", targetCaseNum); err != nil {
		t.Fatal(err)
	}
}

// https://leetcode.cn/contest/season/2022-fall/problems/EXvqDp/

func TestCompareInf(t *testing.T) {
	testutil.DebugTLE = 0

	inputGenerator := func() (k int, g []string) {
		rg := testutil2.NewRandGenerator()
		k = rg.Int(1, 2)
		n := rg.Int(1, 3)
		m := rg.Int(1, 3)
		g = make([]string, n)
		for i := range g {
			g[i] = rg.StrInSet(m, m, ".EWO")
		}
		return
	}

	runAC := func(k int, g []string) (ans [][]int) {
		n, m := len(g), len(g[0])
		cs := [][2]int{{0, 0}, {0, m - 1}, {n - 1, 0}, {n - 1, m - 1}}
		f := func(i, j, d int) {
			k := k
			for k >= 0 {
				k--
				if i < 0 || i >= n || j < 0 || j >= m {
					return
				}
				b := g[i][j]
				if b == 'O' {
					ans = append(ans, []int{i,j})
					return
				}
				if b == '.' {

				}
			}
		}
		for i, r := range g {
		o:
			for j, v := range r {
				if v == 'O' {
					continue
				}
				for _, c := range cs {
					if c == [2]int{i, j} {
						continue o
					}
				}
				if i == 0 {
					f(i, j, 2)
				}
				if i == n-1 {
					f(i, j, 0)
				}
				if j == 0 {
					f(i, j, 1)
				}
				if j == m-1 {
					f(i, j, 3)
				}
			}
		}
		return
	}

	// test examples first
	if err := testutil.RunLeetCodeFuncWithFile(t, runAC, "c.txt", 0); err != nil {
		t.Fatal(err)
	}
	return

	testutil.CompareInf(t, inputGenerator, runAC, nil /*TODO*/)
}
